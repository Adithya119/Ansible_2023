## This is similar to tomcat9.yml but this also works on CentOS
- name: Install tomcat9 on all Ubuntu versions; CentOS >= 7
  hosts: all
  become: yes

  vars:
    jdk_file: openjdk-11-jdk
    jdk_file_centos: java-1.8.0-openjdk-devel
    tomcat_username: tomcat
    tomcat_home: /opt/tomcat
    tomcat_shell: /bin/false
    tomcat_version: '9.0.54'

  tasks:

    - name: Install Java on Ubuntu
      package:
        name: "{{ jdk_file }}"
        update_cache: yes
        state: present
      when: ansible_facts['distribution'] == "Ubuntu" 

    - name: Install Java on CentOS
      package:
        name: "{{ jdk_file_centos }}"
        update_cache: yes
        state: present
      when: ansible_facts['distribution'] == "CentOS" and ansible_facts['distribution_major_version'] | int >= 7

    - name: Add {{ tomcat_username }} user
      user:
        name: "{{ tomcat_username }}"
        home: "{{ tomcat_home }}"
        shell: "{{ tomcat_shell }}"
        state: present

    - name: download tomcat tar file
      get_url:
        url: "https://archive.apache.org/dist/tomcat/tomcat-9/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"

    - name: unzip the tomcat tar file
      unarchive:
        src: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "{{ tomcat_home }}"
        remote_src: yes
        creates: "/opt/tomcat/apache-tomcat-{{ tomcat_version }}"

    - name: create a symbolic link named latest that points to tomcat installation directory
      file:
        state: link
        src: "{{ tomcat_home }}/apache-tomcat-{{ tomcat_version }}"
        dest: "{{ tomcat_home }}/latest"

    - name: change ownership of "{{ tomcat_home }}" to "{{ tomcat_username }}"
      file:
        owner: "{{ tomcat_username }}"
        group: "{{ tomcat_username }}"
        path: "{{ tomcat_home }}"
        state: directory
        recurse: yes

    - name: find all .sh files under the directory /opt/tomcat/latest/bin/
      find:
        path: "{{ tomcat_home }}/latest/bin/"
        pattern: '*.sh'
      register: output

    - name: grep for the field 'path' in the registered "output" and store the result in the newly created ansible fact named sh_files
      set_fact:
        sh_files: "{{ output.files | map(attribute = 'path') | list }}"

    - name: print sh_files (contents of newly created ansible fact)
      debug:
        msg: "{{ sh_files }}"

    - name: chmod +x for all shell files
      file:
        path: "{{ item }}"
        mode: 0751
      with_items: "{{ sh_files }}"

    - name: copy tomcat.service file
      copy:
        src: tomcat.service
        dest: /etc/systemd/system/tomcat.service
      when: ansible_facts['distribution'] == "Ubuntu"
      notify:
        - daemon reload, enable and restart tomcat service if config file is changed
      
    - name: copy tomcat.service file
      copy:
        src: tomcat-on-centos
        dest: /etc/systemd/system/tomcat.service
      when: ansible_facts['distribution'] == "CentOS" and ansible_facts['distribution_major_version'] | int >= 7
      notify:
        - daemon reload, enable and restart tomcat service if config file is changed

    - name: start the tomcat service     # Note that tomcat service will be untouched if it's already running. No handler is required for this.
      service:
        name: tomcat.service
        state: started

  handlers:
    - name: daemon reload, enable and restart tomcat service if config file is changed
      systemd:
        name: tomcat.service
        daemon_reload: yes
        enabled: yes
        state: restarted